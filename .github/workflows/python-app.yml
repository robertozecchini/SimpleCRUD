# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches: [ main, mysql ]
  pull_request:
    branches: [ main]

jobs:
  build:

    runs-on: ubuntu-latest
    
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image
        image: mysql:5.7
        # Provide the password for postgres
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: test
          MYSQL_ROOT_HOST: 0.0.0.0
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          # Maps tcp port 5432 on service container to the host
          - 33306:3306

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Verify MySQL connection from container 
      run: |
        #sudo apt-get update
        #sudo apt-get install -y mysql-client
        mysql --host 127.0.0.1 --port 33306 -uroot -ptest -e "SHOW DATABASES"
    - name: Prepare db
      run: |
        #flask db init
        #flask db migrate
        flask db upgrade
    - name: Test with unittest
      run: |
        python -m unittest
    - name: Generate Report
      run: |
        pip install coverage
        coverage run -m unittest
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
